-- MySQL Script generated by MySQL Workbench
-- Sat May  1 16:43:49 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema stock
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema stock
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `stock` DEFAULT CHARACTER SET utf8 ;
USE `stock` ;

-- -----------------------------------------------------
-- Table `stock`.`dobavljac`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`dobavljac` ;

CREATE TABLE IF NOT EXISTS `stock`.`dobavljac` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ime` VARCHAR(45) NULL,
  `prezime` VARCHAR(45) NULL,
  `telefon` VARCHAR(15) NULL,
  `adresa` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stock`.`kupac`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`kupac` ;

CREATE TABLE IF NOT EXISTS `stock`.`kupac` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ime` VARCHAR(45) NULL,
  `prezime` VARCHAR(45) NULL,
  `jmbg` VARCHAR(45) NULL,
  `adresa` VARCHAR(45) NULL,
  `telefon` VARCHAR(45) NULL,
  `roba_id` INT NOT NULL,
  PRIMARY KEY (`id`, `roba_id`),
  INDEX `fk_kupac_roba1_idx` (`roba_id` ASC) VISIBLE,
  CONSTRAINT `fk_kupac_roba1`
    FOREIGN KEY (`roba_id`)
    REFERENCES `stock`.`roba` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stock`.`loginTable`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`loginTable` ;

CREATE TABLE IF NOT EXISTS `stock`.`loginTable` (
  `login` INT NOT NULL,
  `password` VARCHAR(258) NULL,
  `tip` VARCHAR(10) NULL,
  PRIMARY KEY (`login`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stock`.`radnik`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`radnik` ;

CREATE TABLE IF NOT EXISTS `stock`.`radnik` (
  `login` VARCHAR(15) NOT NULL,
  `ime` VARCHAR(45) NULL,
  `prezime` VARCHAR(45) NULL,
  `jmbg` VARCHAR(18) NULL,
  `plata` VARCHAR(45) NULL,
  `skladiste_id` INT NOT NULL,
  PRIMARY KEY (`login`, `skladiste_id`),
  INDEX `fk_radnik_skladiste_idx` (`skladiste_id` ASC) VISIBLE,
  CONSTRAINT `fk_radnik_skladiste`
    FOREIGN KEY (`skladiste_id`)
    REFERENCES `stock`.`skladiste` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stock`.`radnik_has_dobavljac`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`radnik_has_dobavljac` ;

CREATE TABLE IF NOT EXISTS `stock`.`radnik_has_dobavljac` (
  `radnik_login` VARCHAR(15) NOT NULL,
  `dobavljac_id` INT NOT NULL,
  `datum` TIMESTAMP NULL,
  PRIMARY KEY (`radnik_login`, `dobavljac_id`),
  INDEX `fk_radnik_has_dobavljac_dobavljac1_idx` (`dobavljac_id` ASC) VISIBLE,
  INDEX `fk_radnik_has_dobavljac_radnik1_idx` (`radnik_login` ASC) VISIBLE,
  CONSTRAINT `fk_radnik_has_dobavljac_radnik1`
    FOREIGN KEY (`radnik_login`)
    REFERENCES `stock`.`radnik` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_radnik_has_dobavljac_dobavljac1`
    FOREIGN KEY (`dobavljac_id`)
    REFERENCES `stock`.`dobavljac` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stock`.`roba`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`roba` ;

CREATE TABLE IF NOT EXISTS `stock`.`roba` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `kolicina` DOUBLE NULL,
  `cijena` DOUBLE NULL,
  `skladiste_id` INT NOT NULL,
  `dobavljac_id` INT NOT NULL,
  PRIMARY KEY (`id`, `skladiste_id`, `dobavljac_id`),
  INDEX `fk_roba_skladiste1_idx` (`skladiste_id` ASC) VISIBLE,
  INDEX `fk_roba_dobavljac1_idx` (`dobavljac_id` ASC) VISIBLE,
  CONSTRAINT `fk_roba_skladiste1`
    FOREIGN KEY (`skladiste_id`)
    REFERENCES `stock`.`skladiste` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_roba_dobavljac1`
    FOREIGN KEY (`dobavljac_id`)
    REFERENCES `stock`.`dobavljac` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stock`.`skladiste`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stock`.`skladiste` ;

CREATE TABLE IF NOT EXISTS `stock`.`skladiste` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `adresa` VARCHAR(45) NOT NULL,
  `visina` INT NOT NULL,
  `sirina` INT NOT NULL,
  `duzina` INT NOT NULL,
  `info` VARCHAR(200) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

USE `stock` ;

-- -----------------------------------------------------
-- procedure dodajSkladiste
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`dodajSkladiste`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `dodajSkladiste` (IN adr VARCHAR(45),IN vis INT,IN sir INT,IN duz INT,IN info VARCHAR(45))
BEGIN
		insert into `skladiste`(`adresa`,`visina`,`sirina`,`duzina`,`info`)
        values (adr,vis,sir,duz,info);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dodajRadnika
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`dodajRadnika`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `dodajRadnika` (IN login VARCHAR(45),IN ime VARCHAR(45),IN prezime VARCHAR(45),IN jmbg VARCHAR(18),IN plata DOUBLE,IN skladiste_id INT)
BEGIN
		insert into `radnik`(`login`,`ime`,`prezime`,`jmbg`,`plata`,`skladiste_id`)
        values (login,ime,prezime,jmbg,plata,skladiste_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dodajDobavljaca
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`dodajDobavljaca`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `dodajDobavljaca` (IN ime VARCHAR(45),IN prezime VARCHAR(45),IN telefon VARCHAR(45),IN adresa VARCHAR(45))
BEGIN
		insert into `dobavljac`(`ime`,`prezime`,`telefon`,`adresa`)
        values (ime,prezime,telefon,adresa);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dodajKupca
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`dodajKupca`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `dodajKupca` (IN ime VARCHAR(45),IN prezime VARCHAR(45),IN jmbg VARCHAR(18),IN adresa VARCHAR(45),IN telefon VARCHAR(20),IN roba_id INT)
BEGIN
		insert into `kupac`(`ime`,`prezime`,`jmbg`,`adresa`,`telefon`,`roba_id`)
        values (ime,prezime,jmbg,adresa,telefon,roba_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dodajRobu
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`dodajRobu`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `dodajRobu` (IN kolicina DOUBLE,IN cijena DOUBLE, IN skladiste_id INT,IN dobavljac_id INT)
BEGIN
		insert into `roba`(`kolicina`,`cijena`,`skladiste_id`,`dobavljac_id`)
        values(kolicina,cijena,skladiste_id,dobavljac_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dodajLogin
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`dodajLogin`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `dodajLogin` (IN login VARCHAR(45),IN pass VARCHAR(258),IN tip VARCHAR(45))
BEGIN
		insert into `login`(`login`,`password`,`tip`)
        values(login,pass,tip);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pronadjiKorisnika
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`pronadjiKorisnika`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `pronadjiKorisnika` (IN loginCheck VARCHAR(45),IN passCheck VARCHAR(258),OUT isOk BOOLEAN)
BEGIN
	declare passBase varchar(45);
    
    set passBase = ( select `password` from `loginTable` where login = loginCheck );
    
    if passBase = passCheck  then set isOk = true;
    else set isOk = false;
    end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure zauzetoSkladiste
-- -----------------------------------------------------

USE `stock`;
DROP procedure IF EXISTS `stock`.`zauzetoSkladiste`;

DELIMITER $$
USE `stock`$$
CREATE PROCEDURE `zauzetoSkladiste` (IN skladiste_id INT, OUT ostatak DOUBLE)
BEGIN
		DECLARE v INTEGER; DECLARE s INTEGER; DECLARE d INTEGER; declare z integer; declare zauzeto double;
        set v = (select visina from `skladiste` where id = skladiste_id);
		set s = (select sirina from `skladiste` where id = skladiste_id);
        set d = (select duzina from `skladiste` where id = skladiste_id);
        

        set z = v * s * d;
        
        set zauzeto = (select sum(kolicina) from `roba` where `roba`.skladiste_id = skladiste_id);
        
        set ostatak = z - zauzeto;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
